---
type Props = {
    defaultTheme?: 'auto' | 'dark' | 'light' | undefined,
}

const { defaultTheme = 'auto' } = Astro.props
---

<script is:inline data-default-theme={defaultTheme}>
    const toColorVariable = key => `--${key.replace('_', '-')}`

    const themes = new Map()
    themes.set('dark', { // sandstorm
        "background": "#3b3a36",
        "f_high": "#e5ccaf",
        "f_med": "#fc9e21",
        "f_low": "#685e4f",
        "f_inv": "#3b3a36",
        "b_high": "#736c5e",
        "b_med": "#57534a",
        "b_low": "#44413c",
        "b_inv": "#fc9e21",
    })
    themes.set('light', { // tape
        "background": "#dad7cd",
        "f_high": "#696861",
        "f_med": "#ffffff",
        "f_low": "#b3b2ac",
        "f_inv": "#43423e",
        "b_high": "#43423e",
        "b_med": "#c2c1bb",
        "b_low": "#e5e3dc",
        "b_inv": "#eb3f48",
    })
    themes.set('appolo', {
        "background": "#29272b",
        "f_high": "#ffffff",
        "f_med": "#e47464",
        "f_low": "#66606b",
        "f_inv": "#000000",
        "b_high": "#000000",
        "b_med": "#201e21",
        "b_low": "#322e33",
        "b_inv": "#e47464",
    })
    themes.set('marble', {
        "background": "#FBFBF2",
        "f_high": "#3a3738",
        "f_med": "#847577",
        "f_low": "#bdb8b8",
        "f_inv": "#A6A2A2",
        "b_high": "#676164",
        "b_med": "#A6A2A2",
        "b_low": "#CFD2CD",
        "b_inv": "#676164",
    })

    window.theme ??= (() => {
        const defaultTheme = document.currentScript.getAttribute('data-default-theme')
        const storageKey = 'theme'
        const store = typeof localStorage !== 'undefined'
            ? localStorage
            : { getItem: () => null, setItem: () => {} }
        const mediaMatcher = window.matchMedia('(prefers-color-scheme: light)')
        let systemTheme = mediaMatcher.matches ? 'light' : 'dark'
        mediaMatcher.addEventListener('change', event => {
            systemTheme = event.matches ? 'light' : 'dark'
            applyTheme(theme.getTheme())
        })

        function applyTheme(theme) {
            const resolvedTheme = theme === 'auto' ? systemTheme : theme
            document.documentElement.style.colorScheme = resolvedTheme
            const colors = themes.get(theme)
            Object.entries(colors).forEach(([key, value]) => {
                document.documentElement.style.setProperty(toColorVariable(key), value)
            })
            document.dispatchEvent(
                new CustomEvent('theme-changed', {
                    detail: { theme, systemTheme, defaultTheme },
                })
            )
        }

        function setTheme(theme = defaultTheme) {
            if (!themes.has(theme)) return
            store.setItem(storageKey, theme)
            applyTheme(theme)
        }

        function getTheme() {
            return store.getItem(storageKey) || defaultTheme
        }

        function getSystemTheme() {
            return systemTheme
        }

        function getDefaultTheme() {
            return defaultTheme
        }

        return {
            getDefaultTheme,
            getSystemTheme,
            getTheme,
            setTheme,
        }
    })()

    theme.setTheme(theme.getTheme())
</script>

<script>
    document.addEventListener('astro:after-swap', () =>
        // @ts-ignore-next-line
        theme.setTheme(theme.getTheme())
    )
</script>
